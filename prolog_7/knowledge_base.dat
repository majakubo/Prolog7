    plansza([[w  ,w  ,w  ,w  ,w  ,w  ,w  ,w  ,w  ],
			 [w,  b1R,b1 ,r1R,r1 ,x  ,g1R,y1R,w  ],
             [w,  b1 ,b1 ,x  ,r2R,r2 ,x  ,y1 ,w  ],
             [w,  x  ,x  ,x  ,y2R,g2R,x  ,y3R,w  ],
             [w,  p1r,p1 ,x  ,y2 ,g3R,x  ,y3 ,w  ],
             [w,  p1 ,p1 ,x  ,x  ,x  ,b2R,b2 ,w  ],
             [w,  p1 ,p1 ,x  ,r3R,r3 ,b2 ,b2 ,w  ],
             [w  ,w  ,w  ,w  ,w  ,w  ,w  ,w  ,w  ]]).
     
    blue(b1r).
    blue(b2r).
    blue(b1).
    blue(b2).
     
    red(r1r).
    red(r2r).
    red(r3r).
    red(r1).
    red(r2).
    red(r3).
     
    purple(p1r).
    purple(p1).
     
    yellow(y1r).
    yellow(y2r).
    yellow(y3r).
    yellow(y1).
    yellow(y2).
    yellow(y3).
     
    green(g1r).
    green(g2r).
    green(g3r).
    
    
     
    %pozycja(B, X,Y,b1).
    pozycja(B, Y, X, Char) :-
        nth0(Y, B, Column), 
        nth0(X, Column, Char).
     
    %%czy_puste(B,[[X,Y]|[]]).
    czy_puste(B, Y, X) :-
        pozycja(B, Y, X, x).
    
    czy_sciana(B, Y, X):-
        pozycja(B, Y, X, w).
              
    podmien_w_liscie(Index, Elem, [_|T], [Elem|T]) :-
        Index = 0, !. 
    podmien_w_liscie(Index, Elem, [H|T], [H|Out]) :-
        Index1 is Index - 1,
        podmien_w_liscie(Index1, Elem, T, Out).  
     
    wstaw_do_dwuwymiarowej([X1,Y1,C],B, Bnew) :-
        nth0(X1, B, ColFrom),
        podmien_w_liscie(Y1, C, ColFrom, ColFromNew),
        podmien_w_liscie(X1, ColFromNew, B, Bnew).
	

    %corner case		
    wykonaj_wiele_przemieszczen([], B, Bnew):-
        Bnew = B, !.

	%wykonaj_wiele_przemieszczen(lista wspolrzednych i znakow->[[x, y, z]..],
	%                            Board, Bnew)
    wykonaj_wiele_przemieszczen([H|T], B, Bnew):-
    	wstaw_do_dwuwymiarowej(H, B, Btemp),
        wykonaj_wiele_przemieszczen(T, Btemp, Bnew).
	rozpakuj_jedno_elementowa_liste([H|_], A):-
        A is H.
	
    rozpakuj_dwu_elementowa_liste([H|T], A, B):-
        rozpakuj_jedno_elementowa_liste(T, B),
        A is H.
	
    rozpakuj_trzy_elementowa_liste([H|T], A, B, C):-
        A is H,
        rozpakuj_dwu_elementowa_liste(T, B, C).
    
	wykonaj_ruch_zielony_dol(R, B, Bnew):-
        rozpakuj_trzy_elementowa_liste(R, Y, X, Z),
        N is Y+1,
        wykonaj_wiele_przemieszczen([[Y, X, x], [N, X, Z]], B, Bnew).

	czy_mozliwy_zielony_dol(R, B, Bnew):-
        rozpakuj_trzy_elementowa_liste(R, Y, X, Z),
        \+ czy_sciana(B, Y+1, X), 
         czy_wolne(B, Y+1, X),
         wykonaj_ruch_zielony_dol(R, B, Bnew).

	czy_mozliwy_zielony_dol(R, B, Bnew):-
        \+ czy_sciana(B, Y, X), 
        \+ czy_wolne(B, Y, X),
         znajdz_rog_przeszkody(R, B, Rprzeszkody),
         przemiesc(Rprzeszkody, B),
         wykonaj_ruch_zielony_dol(R, B, Bnew).

	znajdz_rog_przeszkody(R, B, Rprzeszkody):-
        rozpakuj_trzy_elementowa_liste(R, Y, X, Z),
        czy_jest_rogiem(Z),
        Rprzeszody is [Y, X, Z].
    
    znajdz_rog_przeszody(R, B, Rprzeszkody):-
        rozpakuj_trzy_elementowa_liste(R, Y, X, Z),
        \+czy_jest_rogiem(Z),
        string_chars(Z, Str),
        append(Str, ['R'], ListRog),
        string_chars(Zprzeszkody, ListRog),
        pozycja(B, Xn, Yn, Zprzeszkody),
        Rprzeszkody is [Yn, Xn, Zprzeszkody].
    


czy_jest_rogiem(Z):-
    string_chars(Z, Str),
    nth0(Q, Str, r).
             
        
       
        
    
     
     
